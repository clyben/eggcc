;; Substitution rules allow for substituting some new expression for the argument
;; in some new context.
;; It performs the substitution, copying over the equalities from the original eclass.
;; It only places context on the leaf nodes.

(ruleset subst)
(ruleset apply-subst-unions)
(ruleset cleanup-subst)

;; (Subst assumption to in) substitutes `to` for `(Arg ty)` in `in`.
;; It also replaces the leaf context in `to` with `assumption` using `AddContext`.
;; `assumption` *justifies* this substitution, as the context that the result is used in.
;; In other words, it must refine the equivalence relation of `in` with `to` as the argument.
(function Subst (Assumption Expr Expr) Expr :unextractable)

;; Used to delay unions for the subst ruleset.
;; This is necessary because substitution may not terminate if it can
;; observe its own results- it may create infinitly large terms.
;; Instead, we phase substitution by delaying resulting unions in this table.
;; After applying this table, substitutions and this table are cleared.
(function DelayedSubstUnion (Expr Expr) Expr :unextractable)

;; add a type rule to get the arg type of a substitution
;; this enables nested substitutions
(rule ((= lhs (Subst assum to in))
       (HasArgType to ty))
      ((HasArgType lhs ty))
      :ruleset subst)

;; leaf node with context
;; replace this context- subst assumes the context is more specific
(rule ((= lhs (Subst assum to (InContext oldctx (Arg ty))))
       (IsLeaf leaf)
       )
      ;; add the assumption `to`
      ((DelayedSubstUnion lhs (AddContext assum (Region) to)))
      :ruleset subst)
(rule ((= lhs (Subst assum to (InContext oldctx (Const c ty))))
       (IsLeaf leaf)
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (InContext assum (Const c newty))))
      :ruleset subst)
(rule ((= lhs (Subst assum to (InContext oldctx (Empty ty))))
       (IsLeaf leaf)
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (InContext assum (Empty newty))))
      :ruleset subst)

;; Operators
(rule ((= lhs (Subst assum to (Bop op c1 c2))))
      ((DelayedSubstUnion lhs
         (Bop op (Subst assum to c1)
                 (Subst assum to c2))))
         :ruleset subst)
(rule ((= lhs (Subst assum to (Uop op c1))))
      ((DelayedSubstUnion lhs
         (Uop op (Subst assum to c1))))
         :ruleset subst)

(rule ((= lhs (Subst assum to (Get c1 index))))
      ((DelayedSubstUnion lhs
         (Get (Subst assum to c1) index)))
         :ruleset subst)
(rule ((= lhs (Subst assum to (Alloc id c1 c2 ty))))
      ((DelayedSubstUnion lhs
         (Alloc id (Subst assum to c1)
                   (Subst assum to c2)
                   ty)))
         :ruleset subst)
(rule ((= lhs (Subst assum to (Call name c1))))
      ((DelayedSubstUnion lhs
         (Call name (Subst assum to c1))))
         :ruleset subst)


;; Tuple operators
(rule ((= lhs (Subst assum to (Single c1))))
      ((DelayedSubstUnion lhs
         (Single (Subst assum to c1))))
         :ruleset subst)
(rule ((= lhs (Subst assum to (Concat c1 c2))))
      ((DelayedSubstUnion lhs
         (Concat (Subst assum to c1)
                 (Subst assum to c2))))
         :ruleset subst)

;; Control flow
(rule ((= lhs (Subst assum to (Switch pred inputs c1))))
      ((DelayedSubstUnion lhs
         (Switch (Subst assum to pred)
                 (Subst assum to inputs)
                 c1)))
         :ruleset subst)
(rule ((= lhs (Subst assum to (If pred inputs c1 c2))))
      ((DelayedSubstUnion lhs
         (If (Subst assum to pred)
             (Subst assum to inputs)
             c1
             c2)))
         :ruleset subst)
(rule ((= lhs (Subst assum to (DoWhile in out))))
      ((DelayedSubstUnion lhs
         (DoWhile (Subst assum to in)
                  out)))
         :ruleset subst)

;; substitute into function (convenience for testing)
(rewrite (Subst assum to (Function name inty outty body))
         (Function name inty outty (Subst assum to body))
         :ruleset subst)



;; ########################### Apply subst unions

(rule ((DelayedSubstUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-subst-unions)


;; ########################### Cleanup subst and DelayedSubstUnion

(rule ((DelayedSubstUnion lhs rhs))
      ((delete (DelayedSubstUnion lhs rhs)))
      :ruleset cleanup-subst)
(rule ((Subst assum to in))
      ((delete (Subst assum to in)))
      :ruleset cleanup-subst)
