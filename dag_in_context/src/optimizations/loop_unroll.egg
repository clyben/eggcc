;; Some simple simplifications of loops
(ruleset loop-unroll)
(ruleset loop-peel)


;; loop peeling rule
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs)))
 ((let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
        executed-once-body ;; inputs are the body executed once
        (DoWhile (Arg inputs-ty then-ctx)
          outputs) ;; right now, loop unrolling shares the same outputs, but we could add more context here
        (Arg inputs-ty (NoContext)))))
 :ruleset loop-peel)


(function UnrollCtx (Expr Expr) Assumption)

;; unroll a loop with constant bounds and initial value
(rule
  ((= lhs (DoWhile inputs outputs))
   (= num-inputs (tuple-length inputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by one each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int 1) _ty2 _ctx2)))
   ;; while less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; start and end constant is a multiple of 4 and greater than start_const
   (> end_constant start_const)
   (= (% start_const 4) 0)
   (= (% end_constant 4) 0)
  )
  (
    (let tmp_context (UnrollCtx inputs outputs))
    (let one-iter (SubTuple outputs 1 num-inputs))
    ;; TODO make unroll 4 times instead of 2
    (let unrolled
        (Subst tmp_context one-iter
          ;(Subst tmp_context one-iter
           ; (Subst tmp_context one-iter
               outputs))
    (union lhs
      (DoWhile inputs
        unrolled))
    (let actual-ctx (InLoop inputs unrolled))
    (union tmp_context actual-ctx)
    (delete (UnrollCtx inputs outputs))
  )
  :ruleset loop-unroll)
  

