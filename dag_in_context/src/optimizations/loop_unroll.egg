;; Some simple simplifications of loops
(ruleset loop-unroll)


;; loop peeling rule
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs)))
 ((let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
        executed-once-body ;; inputs are the body executed once
        (DoWhile (InContext then-ctx (Arg inputs-ty))
          outputs) ;; right now, loop unrolling shares the same outputs, but we could add more context here
        (InContext (NoContext) (Arg inputs-ty)))))
 :ruleset loop-unroll)


;; N / 4


(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const)) (Get inputs counter_i))
   ;; increments by one each loop
   (= next_counter (Get outputs counter_i))
   (= next_counter (Add (Get (InContext ctx (Arg ty)) (+ 1 counter_i))
                        (Const (Int 1))))
   ;; while less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant))))
   ;; end_constant
                           )
  


;; loop unroll by factor of 4
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs)))
 ((let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
        executed-once-body ;; inputs are the body executed once
        (DoWhile (Arg inputs-ty then-ctx)
          outputs) ;; right now, loop unrolling shares the same outputs, but we could add more context here
        (Arg inputs-ty (NoContext)))))
 :ruleset loop-unroll)
