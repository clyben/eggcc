;; Some simple simplifications of loops
(ruleset loop-unroll)
(ruleset loop-peel)

;;                      inputs, outputs -> number of iterations
(function LoopNumItersGuess (Expr Expr) i64 :merge (max 1 (min old new)))

;; by default, guess that all loops run 1000 times
(rule ((DoWhile inputs outputs))
      ((set (LoopNumItersGuess inputs outputs) 1000))
      :ruleset always-run)


;; loop peeling rule
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs))
  (= old_cost (LoopNumItersGuess inputs outputs)))
 ((let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (let else-ctx
    (InIf false (Get executed-once 0) executed-once-body))
  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
        executed-once-body ;; inputs are the body executed once
        (DoWhile (Arg inputs-ty then-ctx)
          outputs) ;; right now, loop unrolling shares the same outputs, but we could add more context here
        (Arg inputs-ty else-ctx)))
   (set (LoopNumItersGuess (Arg inputs-ty then-ctx) outputs) (- old_cost 1))
    )
 :ruleset loop-peel)

