(ruleset interval-analysis)

(datatype Bound
  (IntB i64)
  (BoolB bool)
  (bound-max Bound Bound)
  (bound-min Bound Bound))

; bound tables
(function lo-bound (Expr) Bound :merge (bound-max old new))
(function hi-bound (Expr) Bound :merge (bound-min old new))

; combinators
(rewrite (bound-max (IntB x) (IntB y))
         (IntB (max x y))
         :ruleset interval-analysis)
(rewrite (bound-min (IntB x) (IntB y))
         (IntB (min x y))
         :ruleset interval-analysis)
(rewrite (bound-max (BoolB x) (BoolB y))
         (BoolB (or x y))
         :ruleset interval-analysis)
(rewrite (bound-min (BoolB x) (BoolB y))
         (BoolB (and x y))
         :ruleset interval-analysis)

; =================================
; Constants
; =================================
(rule ((= lhs (Const (Int x) ty)))
      (
        (set (lo-bound lhs) (IntB x))
        (set (hi-bound lhs) (IntB x))
      )
      :ruleset interval-analysis)

(rule ((= lhs (Const (Bool x) ty)))
      (
        (set (lo-bound lhs) (BoolB x))
        (set (hi-bound lhs) (BoolB x))
      )
      :ruleset interval-analysis)

; =================================
; Constant Folding
; =================================
(rule (
       (= (IntB x) (lo-bound expr))
       (= (IntB x) (hi-bound expr))
       (HasArgType expr ty)
      )
      ((union expr (Const (Int x) ty)))
      :ruleset interval-analysis)

(rule (
       (= (BoolB x) (lo-bound expr))
       (= (BoolB x) (hi-bound expr))
       (HasArgType expr ty)
      )
      ((union expr (Const (Bool x) ty)))
      :ruleset interval-analysis)

; lower bound being true means the bool must be true
(rule (
       (= (BoolB true) (lo-bound expr))
       (HasArgType expr ty)
      )
      ((union expr (Const (Bool true) ty)))
      :ruleset interval-analysis)

; upper bound being false means the bool must be false
(rule (
       (= (BoolB false) (hi-bound expr))
       (HasArgType expr ty)
      )
      ((union expr (Const (Bool false) ty)))
      :ruleset interval-analysis)

; =================================
; Arithmetic
; =================================
; + a b interval is (+ la lb) (+ ha hb)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (IntB (+ la lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB hb) (hi-bound b))
      )
      (
       (set (hi-bound lhs) (IntB (+ ha hb)))
      )
      :ruleset interval-analysis)

; mul commutes
(rewrite (Bop (Mul) x y) (Bop (Mul) y x) :ruleset interval-analysis)

; negative number * negative number is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (<= hi-x 0)
        (<= hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; negative number * positive number is negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (<= hi-x 0) ; x <= 0 (x is negative)
        (>= lo-y 0) ; y >= 0 (y is positive)
      )
      ((set (hi-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; < a b interval is (< ha lb) (< la hb)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (BoolB (bool-< ha lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      (
       (set (hi-bound lhs) (BoolB (bool-< la hb)))
      )
      :ruleset interval-analysis)

; <= a b interval is (<= ha lb) (<= la hb)
(rule (
       (= lhs (Bop (LessEq) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (BoolB (bool-<= ha lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (LessEq) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      (
       (set (hi-bound lhs) (BoolB (bool-<= la hb)))
      )
      :ruleset interval-analysis)
; =================================
; Conditionals
; =================================
; lo-bound of If is the min of the lower bounds
; hi-bound of If is the max of the upper bounds
(rule (
       (= lhs (If cond thn els))
       (= lo-thn (lo-bound thn))
       (= lo-els (lo-bound els))
      )
      ((set (lo-bound lhs) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond thn els))
       (= hi-thn (hi-bound thn))
       (= hi-els (hi-bound els))
      )
      ((set (hi-bound lhs) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; Things with bounds still have those bounds when in a context
(rule (
        (= lhs (InContext ctx expr))
        (= lo (lo-bound expr))
      )
      ((set (lo-bound lhs) lo))
      :ruleset interval-analysis)
(rule (
        (= lhs (InContext ctx expr))
        (= hi (hi-bound expr))
      )
      ((set (hi-bound lhs) hi))
      :ruleset interval-analysis)

; if e <= v is true, then e is at most the upper bound of v
(rule (
       (= lhs (InContext (InIf true (Bop (LessEq) (InContext ctx expr) v)) expr))
       (= (IntB hi) (hi-bound v))
      )
      ((set (hi-bound lhs) (IntB hi)))
      :ruleset interval-analysis)

; if e <= v is false, then e is at least the lower bound of v + 1
(rule (
       (= lhs (InContext (InIf false (Bop (LessEq) (InContext ctx expr) v)) expr))
       (= (IntB lo) (lo-bound v))
      )
      ((set (lo-bound lhs) (IntB (+ lo 1))))
      :ruleset interval-analysis)


; if v <= e is true, then e is at least the lower bound of v
(rule (
       (= lhs (InContext (InIf true (Bop (LessEq) v (InContext ctx expr))) expr))
       (= (IntB lo) (lo-bound v))
      )
      ((set (lo-bound lhs) (IntB lo)))
      :ruleset interval-analysis)

; if v <= e is false, then e is at most the upper bound of v - 1
(rule (
       (= lhs (InContext (InIf false (Bop (LessEq) v (InContext ctx expr))) expr))
       (= (IntB hi) (hi-bound v))
      )
      (
       (set (hi-bound lhs) (IntB (- hi 1)))
      )
      :ruleset interval-analysis)