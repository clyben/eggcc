(function ListExpr-length (ListExpr) i64)
(function ListExpr-ith (ListExpr i64) Expr :unextractable)
(function ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(function Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-ith (Expr i64) Expr :unextractable)
(function tuple-length (Expr) i64 :unextractable)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)

(rule ((Single expr)) ((union (tuple-ith (Single expr) 0) expr)) :ruleset always-run)
(rule ((Concat ord expr1 expr2)
       (= ith (tuple-ith expr1 i)))
       ((union (tuple-ith (Concat ord expr1 expr2) i) ith)) :ruleset always-run)

(rule ((Concat ord expr1 expr2)
       (= len1 (tuple-length expr1))
       (= ith (tuple-ith expr2 i)))
       ((union (tuple-ith (Concat ord expr1 expr2) (+ len1 i)) ith)) :ruleset always-run)

(function tuple-remove-fst (Expr) Expr :unextractable)
(rule ((tuple-remove-fst tup)
       (= tup (Concat ord (Single expr1) expr2)))
      ((union (tuple-remove-fst tup) expr2)) :ruleset always-run)

(rule ((tuple-remove-fst tup)
       (= tup (Concat ord expr1 (Single expr2)))
       (HasType expr1 (TupleT (TNil))))
      ((union (tuple-remove-fst tup) expr1)) :ruleset always-run)

(rule ((tuple-remove-fst tup)
       (= tup (Concat ord expr1 expr2))
       (HasType expr1 (TupleT (TCons ty tl))))
      ((union (tuple-remove-fst tup) (Concat ord (tuple-remove-fst expr1) expr2))) :ruleset always-run)

(rule ((tuple-remove-fst tup)
       (= tup (Concat ord expr1 expr2))
       (HasType expr1 (TupleT (TNil))))
      ((union (tuple-remove-fst tup) (Concat ord expr1 (tuple-remove-fst expr2)))) :ruleset always-run)

(function DoWhile-outputs-ith (Expr i64) Expr :unextractable)
(function DoWhile-outputs (Expr) Expr :unextractable)
(function DoWhile-pred (Expr) Expr :unextractable)

(rule ((= loop (DoWhile in pred_out))
       (= pred (tuple-ith pred_out 0)))
      ((union (DoWhile-pred loop) pred)
       (union (DoWhile-outputs loop) (tuple-remove-fst pred_out))) :ruleset always-run)

(rule ((= outs (DoWhile-outputs loop))
       (= ith (tuple-ith outs i)))
      ((union (DoWhile-outputs-ith loop i) ith)) :ruleset always-run)

