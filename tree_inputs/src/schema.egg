; Every term is an `Expr`.
(datatype Expr)
; Used for constructing tuples and `Switch`es.
(datatype ListExpr (Cons Expr ListExpr) (Nil))

; =================================
; Types
; =================================

(sort TypeList)

(datatype Type
  (IntT)
  (BoolT)
  (FuncT Type Type)
  ; Use a tuple of length 0 for a "unit" type
  (TupleT TypeList) 
)

(function TNil () TypeList)
(function TCons (Type TypeList) TypeList)


; =================================
; Equality relations
; =================================

; A Ctx defines an equality relation.
; All program leaves need to refer to a context to distinguish the equality relations.
; No term should mix two contexts that are not equal.
(datatype Ctx
  ; set of equalities between programs, assuming nothing
  (Global)
  ; Ctx is hard to add but easy to remove.
  ; We haven't decided what other Ctxs we may want to support. Here are two
  ; potential use case:
    ; set of reflexive equalities between programs (e.g. a = a)
    ; (Term)   
)

; An Assume node returns its input, but also assumes some (pure) predicate.
; e.g. The following term assumes that the first element of the Input
; to this region is strictly positive:
; (Assume (Input some_computation)
;         (> (Get (Input some_computation) 0) (Num (Global) 0)))
; Analysis of this term can now make use of this fact.

;                 input     predicate
(function Assume (Expr      Expr)       Expr)


; =================================
; Operators that do not create regions
; =================================
(datatype BinaryOp
  (Add)
  (Sub)
  (Mul)
  (LessThan)
  (And)
  (Or)
  (Write))
(datatype UnaryOp
  (Not)
  (Print))



; Constants
(datatype Constant
  (Int i64)
  (Bool bool))
(function Const (Ctx Constant) Expr)

; Operators
(function Bop   (BinaryOp Expr Expr) Expr)
(function Uop   (UnaryOp Expr) Expr)
; gets from a tuple. static index
(function Get   (Expr i64) Expr)
; read has a type, so it can't be a bop
(function Read  (Expr Type)      Expr) 

; =================================
; Tuple operations
; =================================
(datatype Order (Parallel) (Sequential))

; Perform a list of operations. Only way to create a tuple!
; Needs a Ctx because the list may be empty.
; E.g. (All (Parallel) (Nil)) is a leaf, so it needs a Ctx.
(function All (Ctx Order ListExpr) Expr)

; Switch on a list of lazily-evaluated branches. Does not create a region.
; pred must be an integer
;                 pred     branches     chosen
(function Switch (Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred then else
(function If (Expr Expr Expr) Expr)


; =================================
; Regions
; =================================

; An `Input` marks a shared computation inside of a Let.
; `Input` is not allowed in `Loop` or `Function` (use `Arg` instead).
; Invariant: All inputs that are children of a region are equal.
; Invariant: (Input a) = (Input b) iff a = b.
; Don't union Inputs directly- they will be unioned via congruence.
(function Input (Expr) Expr)
; An argument to a `Function` or
; a `Loop`.
; Since nothing can be assumed by
; default about a function's inputs
; or a loop's outputs, we use
; `Arg` to represent the input.
(function Arg (Type) Expr)



; Creates a region, allowing for a shared computation
; using `Input`. Evaluates the input first, then
; evaluates `output` on the result.
; 
;              output
(function Let (Expr)   Expr)


; A do-while loop.
; Evaluates `input` first, then evaluates `output` on the result.
; Last, evaluates `pred`.
; `pred` must be a boolean, and `output` can have any type.
; `pred` and `output` use `Arg` to refer to loop arguments.
; 
;                  input output   pred
(function DoWhile (Expr  Expr     Expr)    Expr)


; =================================
; Functions
; =================================

; An entry function and a list of additional functions.
;                      entry function     other functions
(relation Program     (Expr               ListExpr))
;                   name   input ty  output ty  output
(function Function (String Type      Type       Expr)      Expr)

;               name of func  arg
(function Call (String        Expr) Expr)


; Rulesets
(ruleset always-run)
(ruleset error-checking)
