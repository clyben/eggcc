(datatype Literal)
(datatype Expr)
(datatype Operand)
(datatype Body)

(sort VecOperandBase (Vec Operand))
(datatype VecOperand (VO VecOperandBase))

(sort VecVecOperandBase (Vec VecOperand))
(datatype VecVecOperand (VVO VecVecOperandBase))

;; Type
(datatype Type
    (IntT)
    (BoolT)
    (FloatT)
    (CharT)
    (PointerT Type))
(datatype EffectType
    (Bril Type)
    (PrintState))
(sort FuncSigs (Vec EffectType))
(datatype OptionType
    (SomeType Type)
    (NoneType))
;; Literal
(function Num (i64) Literal)
(function Float (f64) Literal)
(function Char (String) Literal)
(function Bool (bool) Literal)

;; Expr
(datatype ConstOps (const))
(function Const (Type ConstOps Literal) Expr)
;; Call takes n + 1 arguments, where the last one is the state edge.
;; It returns {1, 2} values, where the first one is a state edge and 
;; the second one (optional) is the actual return value.
(function Call (OptionType String VecOperand) Expr)
(function badd (Type Operand Operand) Expr)
(function bsub (Type Operand Operand) Expr)
(function bmul (Type Operand Operand) Expr)
(function bdiv (Type Operand Operand) Expr)
(function beq (Type Operand Operand) Expr)
(function blt (Type Operand Operand) Expr)
(function bgt (Type Operand Operand) Expr)
(function ble (Type Operand Operand) Expr)
(function bge (Type Operand Operand) Expr)
(function bnot (Type Operand Operand) Expr)
(function band (Type Operand Operand) Expr)
(function bor (Type Operand Operand) Expr)
(function PRINT (Operand Operand) Expr)

;; Operand
(function Arg (i64) Operand)
(function Node (Body) Operand)
(function Project (i64 Body) Operand)

;; Body
(function PureOp (Expr) Body)
;; branching
;; predicate (outside switch), inputs (outside switch),
;; and for each branch a vector of outputs
(function Gamma (Operand VecOperand VecVecOperand) Body)
;; loops
;; predicate (inside loop), inputs (outside loop), outputs (inside loop)
(function Theta (Operand VecOperand VecOperand) Body :cost 20)
;; A body can also just be a VecOperand for convenience
;; This has no corresponding node in rust, it can be
;; removed during translation
(function OperandGroup (VecOperand) Body)

(datatype FunctionOutput
    (StateOnly Operand)
    ;;             state   value type  value
    (StateAndValue Operand Type        Operand))

(datatype Function
    (Func String FuncSigs FunctionOutput))


;; procedure f(n):
;;   i = 0
;;   ans = 0
;;   do:
;;     ans += i*5;
;;     i += 1
;;   while(i < n);
;;   return ansm

;; ;; inputs: [n]
; (Project 0
;     (Theta
;        ;     i       n
;         (lt (Arg 1) (Arg 2)) ;; pred
;         (vec-of ;; inputs
;             (Node (PureOp (Const 0))) ;; accumulator
;             (Node (PureOp (Const 0))) ;; loop var
;             (Arg 0) ;; n
;             )
;         (vec-of ;; outputs
;             (Node (PureOp (add (Arg 0) ;; ans
;                 (Node (PureOp (mul 
;                     (Arg 1) ;; i
;                     (Node (PureOp (Const 5))))))))) ;; ans = i*5
;             (Node (PureOp (add (Arg 1) (Node (PureOp (Const 1)))))) ;; i += 1
;             (Arg 2) ;; n
;         ))
; )


