(ruleset loop_inv)

(relation arg_inv (Body i64))

;; find invariant
(relation find_inv_expr (Body Expr))
(relation find_inv_oprd (Body Operand))
(relation find_inv_body (Body Body))
;;				body1: context  body2: who owns the vec
(relation find_inv_vo (Body Body VecOperand))

(relation is_inv_expr (Body Expr))
(relation is_inv_oprd (Body Operand))
(relation is_inv_body (Body Body))
(relation is_inv_vo (Body Body VecOperand))

(relation arg_inv_helper (VecOperand Body i64))

; (rule ((= theta (Theta pred (VO inputs) (VO outputs)))
; 		(= n (vec-length inputs)) 
; 		(< i n)
; 		(= (vec-get (outputs) i) (Arg i)))
; 	(arg_inv theta i))

(rule ((= theta (Theta pred inputs outputs))) 
	((arg_inv_helper outputs theta 0)))

(rule ((arg_inv_helper (VO outputs) theta i)
		(< i (vec-length outputs))
		(= (vec-get outputs i) (Arg i)))
	((arg_inv theta i)))

(rule ((arg_inv_helper (VO outputs) theta i)
		(< i (vec-length outputs))) 
	((arg_inv_helper (VO outputs) theta (+ i 1))))

;; top level entry ;
(rule ((= theta (Theta pred inputs output))
       (= i (arg_inv theta)))
      ((find_inv_vo theta theta outputs)))

(rule ((find_inv_body theta body) 
		(= body (PureOp op))) 
	((find_inv_expr theta op)))

(rule ((find_inv_body theta body) 
		(= body (Theta pred inputs outputs))) 
	((find_inv_vo theta body inputs)))


(rule ((find_inv_body theta body) 
		(= body (Gamma pred inputs outputs))) 
	((find_inv_oprd body pred) (find_inv_vo theta body inputs)))


;; vo -> op
(relation find_inv_vo_helper (VecOperand Body Body i64))

(rule ((find_inv_vo	theta owner vo)) ((find_inv_vo_helper theta owner vo 0)))

(rule ((find_inv_vo_helper theta owner (VO vec) i)
		(= n (vec-length i))
		(< i n))
	((find_inv_oprd theta (vec-get i vec)) (find_inv_vo_helper theta owner vo (+ i 1))))


;; terminal
(rule ((find_inv_expr theta (Const ty ops lit))) 
	((is_inv_expr theta (Const ty ops lit))))


;; TODO: If call is pure it could be invariant
;; print should never be invariant.

;; match on every binary expr, see loop_invariant.rs
; (rule ((find_inv_expr theta (Someop ty a b)))
; 		((find_inv_oprd theta a) (find_inv_oprd theta b)))


;; terminal, if a arg is recorded as inv in current theta
(rule ((find_inv_oprd theta oprd)
		(= oprd (Arg i))
		(arg_inv theta i)) 
	((is_inv_oprd theta oprd)))


(rule ((find_inv_oprd theta oprd)
		(= oprd (Node body))) 
	((find_inv_body theta body)))


;; TODO in some case it might be the body is not invariant but ith output is.
(rule ((find_inv_oprd theta oprd)
		(= oprd (Project i body))) 
	((find_inv_body theta body)))



;; vo -> op ?
					;; body1: context  body2:owner of vec
(relation inv_vo_helper (VecOperand Body Body i64))

(rule ((find_inv_vo theta owner vo)) ((inv_vo_helper vo body owener 0)))

(rule ((inv_vo_helper (VO vec) body owner i)
		(is_inv_oprd body oprd)
		(= oprd (vec-get vec i)))
	((inv_vo_helper (VO vec) body owener (+ i 1))))

(rule ((inv_vo_helper vo body owner i)
		(= i (vec-length vec)))
	((is_inv_vo body owner vo)))

;; match on every binary op, see loop_invariants.rs
; (rule ((is_inv_oprd body a) 
; 		(is_inv_oprd body b) 
; 		(find_inv_expr body expr)
; 		(= expr (Someop a b)))
; 	((is_inv_expr body expr)))


(rule ((is_inv_expr body expr)
		(find_inv_body body to_find)
		(= to_find (PureOp expr))) 
	(is_inv_body body to_find))


(rule ((is_inv_body body inv)
		(find_inv_oprd body oprd)
		(= oprd (Node inv)))
	(is_inv_oprd body oprd))

(rule ((is_inv_body body inv)
		(find_inv_oprd body oprd)
		(= oprd (Project i inv)))
	(is_inv_oprd body oprd))



; (relation is_pure_body (Body))
; (relation is_pure_expr (Expr))
; (relation is_pure_oprd (Operand))

; (relation find_pure_body (Body))
; (relation find_pure_expr (Expr))
; (relation find_pure_oprd (Operand))
; (relation find_pure_vo (Body VecOperand))
; (relation find_pure_vvo (Body VecVecOperand))


; (rule ((= body (PureOp expr))) ((find_inv_expr expr)))
; (rule ((= body (Gamma pred inputs outputs))) ((find_pure_oprd pred) (find_pure_vvo outputs)))
; (rule ((= body (Theta pred inputs outputs))) ((find_pure_oprd pred) (find_pure_vo outputs)))
; (relation ())
; (rule ((find_pure_vvo (VVO outputs))))

;; two more for theta and gamma
;; a theta is invariant in a context when all input are inv.
;; the promblem is only pure theta/gamma can be considered invariant and move out loop.
;; but if there are state edge, if it's invariant, it must just pass through the loop....
;; need more thinking.
(rule ((find_inv_body theta body)
		(= body (Theta pred inputs outputs))
		(is_inv_vo theta body inputs))
	((is_inv_body theta body)))

(rule ((find_inv_body theta body)
		(= body (Gamma pred inputs outputs))
		(is_inv_oprd theta pred)
		(is_inv_vo theta body inputs))
	((is_inv_body theta body)))