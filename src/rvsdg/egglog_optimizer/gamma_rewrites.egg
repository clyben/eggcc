;;	if a && b:
;;		A
;;	else:
;;		B
;; ----------
;;	if a:
;;		if b:
;;			A
;;		else:
;;			B
;;	else:
;;		B
(rule ((= gamma (Gamma (Node (PureOp (band BoolT a b))) (VO inputs) (VVO outputs)))
       (= (vec-length outputs) 2)
       (= (vec-get outputs 1) (VO A))
       (= (vec-get outputs 0) (VO B))
       (= args (vec-length inputs))
       (= rets (vec-length B)))
      ((let inner (Gamma (Arg args) ; we pass b as an extra argument to the outer gamma
                         (PassThroughArguments args)
                         (VVO (vec-of (VO B)
                                      (VO A)))))
       (union gamma (Gamma a
                           (VO (vec-push inputs b)) ; pass b as an extra argument
                           (VVO (vec-of (VO B)
                                        (BodyToVecOperand rets inner)))))))

;;	if a || b:
;;		A
;;	else:
;;		B
;; -----------
;;	if a:
;;		A
;;	else:
;;		if b:
;;			A
;;		else:
;;			B
(rule ((= gamma (Gamma (Node (PureOp (bor BoolT a b))) (VO inputs) (VVO outputs)))
       (= (vec-length outputs) 2)
       (= (vec-get outputs 1) (VO A))
       (= (vec-get outputs 0) (VO B))
       (= args (vec-length inputs))
       (= rets (vec-length B)))
      ((let inner (Gamma (Arg args) ; we pass b as an extra argument to the outer gamma
                         (PassThroughArguments args)
                         (VVO (vec-of (VO B)
                                      (VO A)))))
       (union gamma (Gamma a
                           (VO (vec-push inputs b)) ; pass b as an extra argument
                           (VVO (vec-of (BodyToVecOperand rets inner)
                                        (VO A)))))))

;;	if a:
;;		A
;;	else:
;;		A
;; ------
;;	A
(rule ((= gamma (Gamma condition inputs (VVO outputs)))
       (= (vec-length outputs) 2)
       (= (vec-get outputs 0) (vec-get outputs 1)))
      ((union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 0) inputs)))))

;;	if !(a or b):
;;	       A
;;	else:
;;	       B
;;	------
;;	if !a or !b:
;;	       A
;;	else:
;;	       B
(rule (
       (= gamma (Gamma (Node (PureOp (bnot (BoolT) (Node (PureOp (bor (BoolT) a b)))))) inputs outputs))
      )
      (
       
       (union gamma (Gamma (Node (PureOp (bor (BoolT)
                            (Node (PureOp (bnot (BoolT) a)))
                            (Node (PureOp (bnot (BoolT) b)))))) inputs outputs))
      )
)

;;	if !(a and b):
;;	       A
;;	else:
;;	       B
;;	------
;;	if !a and !b:
;;	       A
;;	else:
;;	       B
(rule (
       (= gamma (Gamma (Node (PureOp (bnot (BoolT) (Node (PureOp (band (BoolT) a b)))))) inputs outputs))
      )
      (
       
       (union gamma (Gamma (Node (PureOp (band (BoolT)
                            (Node (PureOp (bnot (BoolT) a)))
                            (Node (PureOp (bnot (BoolT) b)))))) inputs outputs))
      )
)


;; !!a -> a
(rewrite (Node (PureOp (bnot (BoolT) (Node (PureOp (bnot (BoolT) a)))))) a)


;;	if E:
;;	       S1
;;	else:
;;	       S2
;;	S3
;;	------
;;	if E:
;;	       S1
;;	       S3
;;	else:
;;	       S2
;;	       S3

(rule (
       (= gamma (Gamma pred inputs (VVO outputs)))
       (= (VO thens) (VecVecOperand-get (VVO outputs) 1)); VecOperand
       (= (VO elses) (VecVecOperand-get (VVO outputs) 0))
       (= plus (Node (PureOp (badd (IntT) (Project i gamma) (Project j gamma)))))
       (Operand-is-pure plus)
       )
       (
       (let new-thens (vec-push thens (Node (PureOp (badd (IntT) (VecOperand-get (VO thens) i) (VecOperand-get (VO thens) j))))))
       (let new-elses (vec-push elses (Node (PureOp (badd (IntT) (VecOperand-get (VO elses) i) (VecOperand-get (VO elses) j))))))
       (let new-gamma (Gamma pred inputs (VVO (vec-of (VO new-thens) (VO new-elses)))))
       (union plus (Project (vec-length outputs) new-gamma))
       )
)
