;;	if a && b:
;;		A
;;	else:
;;		B
;; ----------
;;	if a:
;;		if b:
;;			A
;;		else:
;;			B
;;	else:
;;		B
;; TODO: below doesn't work because inner is not a VO
; (rule ((= gamma (Gamma (Node (PureOp (band BoolT a b))) (VO inputs) (VVO outputs)))
;        (= (vec-length outputs) 2)
;        (= (vec-get outputs 1) (VO A))
;        (= (vec-get outputs 0) (VO B)))
;       ((let inner (Gamma (Arg (vec-length inputs)) (VO inputs) (vec-of (VO B) (VO A))))
;        (union gamma (Gamma a (vec-push inputs b) (vec-of (VO B) inner)))))

;;	if a || b:
;;		A
;;	else:
;;		B
;; -----------
;;	if a:
;;		A
;;	else:
;;		if b:
;;			A
;;		else:
;;			B
;; TODO: below doesn't work because inner is not a VO
; (rule ((= gamma (Gamma (Node (PureOp (bor BoolT a b))) (VO inputs) (VVO outputs)))
;        (= (vec-length outputs) 2)
;        (= (vec-get outputs 1) (VO A))
;        (= (vec-get outputs 0) (VO B)))
;       ((let inner (Gamma (Arg (vec-length inputs)) (VO inputs) (vec-of (VO B) (VO A))))
;        (union gamma (Gamma a (vec-push inputs b) (vec-of inner (VO A))))))

;;	if a:
;;		A
;;	else:
;;		A
;; ------
;;	A
(rule ((= gamma (Gamma condition inputs (VVO outputs)))
       (= (vec-length outputs) 2)
       (= (vec-get outputs 0) (vec-get outputs 1)))
      ((union gamma (OperandGroup (SubstVecOperandAll inputs (vec-get outputs 0))))))
