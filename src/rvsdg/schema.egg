(datatype Literal)
(datatype Expr)
(datatype Operand)
(datatype Body)

(sort VecOperand (Vec Operand))
(datatype VecOperandWrapper
  (VO VecOperand))
(sort VecVecOperand (Vec VecOperandWrapper))

;; Type
(datatype Type
    (IntT)
    (BoolT)
    (FloatT)
    (CharT)
    (PointerT Type))
(datatype value type EffectType
    (Bril Type)      Type 
    (PrintState))
;;           arg types        out type
(sort (Vec EffectType))
;; Literal
(function Num (i64) Literal)
(function Float (f64) Literal)
(function Char (String) Literal)

;; Expr
(datatype ConstOps (const))
(function Const (Type ConstOps Literal) Expr)
(function Call (Type String VecOperand) Expr)
(function add (Type Operand Operand) Expr)
(function sub (Type Operand Operand) Expr)
(function mul (Type Operand Operand) Expr)
(function div (Type Operand Operand) Expr)
(function eq (Type Operand Operand) Expr)
(function lt (Type Operand Operand) Expr)
(function gt (Type Operand Operand) Expr)
(function le (Type Operand Operand) Expr)
(function ge (Type Operand Operand) Expr)
(function not (Type Operand Operand) Expr)
(function and (Type Operand Operand) Expr)
(function or (Type Operand Operand) Expr)

;; Operand
(function Arg (i64) Operand)
(function Node (Body) Operand)
(function Project (i64 Body) Operand)

;; Body
(function PureOp (Expr) Body)
(function Gamma (Operand VecOperand VecVecOperand) Body) ;; branching
(function Theta (Operand VecOperand VecOperand) Body) ;; loop

(datatype FunctionOutput
    (StateOnly Operand)
    ;;             state   value type  value
    (StateAndValue Operand Type        Operand))

(datatype Function
    (Func String FunctionOutput))


;; procedure f(n):
;;   i = 0
;;   while i < n
;;     ans += i * 5
;;     i += 1
;;   return ans

;; ;; inputs: [n]
;; (Project 1
;;     (Theta 
;;         (Lt (Arg 1) (Arg 2)) ;; pred
;;         (vec-of ;; inputs
;;             (Node (PureOp (Const 0))) ;; accumulator
;;             (Node (PureOp (Const 0))) ;; loop var
;;             (Arg 0) ;; n
;;             )
;;         (vec-of ;; outputs
;;             (Node (PureOp (Add (Arg 0) 
;;                 (Node (PureOp (Mul 
;;                     (Arg 1)
;;                     (Node (PureOp (Const 5)))))))))
;;             (Node (PureOp (Add (Arg 1) (Node (PureOp (Const 1))))))
;;             (Arg 2)
;;         ))
;; )