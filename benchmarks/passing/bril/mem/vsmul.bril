@rand(seq: ptr<int>, max: int) : int {
  a: int = const 25214903917;
  c: int = const 11;
  m: int = const 281474976710656;
  x: int = load seq;
  ax: int = mul a x;
  axpc: int = add ax c;
  next: int = div axpc m;
  next: int = mul next m;
  next: int = sub axpc next;
  store seq next;
  val: int = div next max;
  val: int = mul val max;
  val: int = sub next val;
  ret val;
}

# Generates a random array of length `size`
@randarray(size: int, rng: ptr<int>) : ptr<int> {
  arr: ptr<int> = alloc size;
  i: int = const 0;
  max: int = const 1000;
  one: int = const 1;
.loop:
  cond: bool = lt i size;
  br cond .body .done;
.body:
  val: int = call @rand rng max;
  loc: ptr<int> = ptradd arr i;
  store loc val;
.loop_end:
  i: int = add i one;
  jmp .loop;
.done:
  ret arr;
}

@main() {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  loop_bound: int = const 20000;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  call @orig_main loop_counter;
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
}

@orig_main(size: int) {
  seed: int = const 2023;
  two: int = const 2;
  rng: ptr<int> = alloc seed; 
  store rng seed;
  arr: ptr<int> = call @randarray size rng; 
  i: int = const 0; 
  .loop:
    cond: bool = lt i size;
    br cond .body .done;
  .body: 
    loc: ptr<int> = ptradd arr i;
    val: int = load loc;
    val: int = mul val two;
    store loc val;
  .done:
  free arr;
  free rng;
}