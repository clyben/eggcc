# Recursive factorial

@main() {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  loop_bound: int = const 15000;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  call @orig_main loop_counter;
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
}

@orig_main(a: int) {
  x: int = call @fact a;
  print x;
  v13: int = const 0;
}


@fact(a: int): int {
  v1: int = id a;
  v2: int = const 0;
  v3: bool = eq v1 v2;
  br v3 .then.0 .else.0;
.then.0:
  v4: int = const 1;
  ret v4;
.else.0:
  v5: int = id a;
  v6: int = id a;
  v7: int = const 1;
  v8: int = sub v6 v7;
  v9: int = call @fact v8;
  v10: int = mul v5 v9;
  ret v10;
}
