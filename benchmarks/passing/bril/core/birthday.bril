# ARGS: 9500
@main(loop_bound: float) {
  loop_incr: float = const 1;
  loop_counter: float = const 10;
  final_output: float = const 0.0;
.loop_cond:
  loop_cond: bool = flt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  output: float = call @orig_main loop_counter;
  final_output: float = fadd final_output output;
  loop_counter: float = fadd loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
  print final_output;
}

@orig_main(n: float): float {
  v0: float = id n;
  c: float = call @probability v0;
  c: float = id c;
  v1: float = id c;
  v2: int = const 0;
  ret v1;
}
@probability(n: float): float {
  v0: float = const 1;
  prob: float = id v0;
  v2: float = const 1;
  i: float = id v2;
.for.cond.1:
  v3: float = id i;
  v4: float = id n;
  v5: bool = flt v3 v4;
  br v5 .for.body.1 .for.end.1;
.for.body.1:
  v6: float = const 365;
  v7: float = id i;
  v8: float = fsub v6 v7;
  log: float = id v8;
  v9: float = id log;
  v10: float = const 365;
  v11: float = fdiv v9 v10;
  logUpdated: float = id v11;
  v12: float = id prob;
  v13: float = id logUpdated;
  v14: float = fmul v12 v13;
  prob: float = id v14;
  v15: float = id i;
  v16: float = const 1;
  v17: float = fadd v15 v16;
  i: float = id v17;
  jmp .for.cond.1;
.for.end.1:
  v18: float = const 1;
  v19: float = id prob;
  v20: float = const 100;
  v21: float = fmul v19 v20;
  v22: float = const 100;
  v23: float = fdiv v21 v22;
  v24: float = fsub v18 v23;
  ret v24;
}
