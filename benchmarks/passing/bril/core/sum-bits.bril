# ARGS: 3100000
@main(loop_bound: int) {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  final_output: int = const 0;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  output: int = call @orig_main loop_counter;
  final_output: int = add final_output output;
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
  print final_output;
}

@orig_main(input : int): int {
  sum : int = const 0;
  two : int = const 2;
  zero : int = const 0;
.loop:
  cond : bool = eq input zero;
  br cond .done .body;
.body:
  bit : int = call @mod input two;
  input : int = div input two;
  sum : int = add sum bit;
  jmp .loop;
.done:
  ret sum;
}

@mod(dividend : int, divisor : int) : int {
  quotient : int = div dividend divisor;
  two : int = const 2;
  prod : int = mul two quotient;
  diff : int = sub dividend prod;
  ret diff;
}
