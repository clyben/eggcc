# ARGS: 2200000
@main(loop_bound: float) {
  loop_incr: float = const 1;
  loop_counter: float = const 10;
  final_output: float = const 0;
.loop_cond:
  loop_cond: bool = flt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  output: float = call @orig_main loop_counter;
  final_output: float = fadd final_output output;
  loop_counter: float = fadd loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
  print final_output;
}

@orig_main(n: float): float {
  two: float = const 2;
  x: float = fdiv n two; # fist approximation
  prev_x: float = id n;
  target: float = const 0.00001;
.for.cond.1:
  d: float = call @diff prev_x x;
  v6: bool = fgt d target;
  br v6 .for.body.1 .for.end.1;
.for.body.1:
  prev_x: float = id x;
  x: float = call @sqrt x n;
  jmp .for.cond.1;
.for.end.1:
  ret x;
}

# one iteration of the newton method:
# sqrt(x, n) = x - (x^2 - n) / (2*x)
@sqrt(x: float, n: float): float {
  two: float = const 2;
  v0: float = fmul x x;
  v1: float = fsub v0 n;
  v2: float = fmul two x;
  v3: float = fdiv v1 v2;
  v4: float = fsub x v3;
  ret v4;
}

# returns a postivie difference between a and b
@diff(a: float, b: float): float {
  c: bool = fgt a b;
  br c .then.1 .else.1;
.then.1:
  v5: float = fsub a b;
  ret v5;
.else.1:
  v5: float = fsub b a;
  ret v5;
}
