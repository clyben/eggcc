# ARGS: 400000

@pow(x:float, k:int):float
{
    xx: float = const 1.0;
    one: int = const 1;
    i: int = const 0;
  .while:
    b: bool = lt i k;
    br b .continue .endwhile;
  .continue:
    xx: float = fmul xx x;
    i: int = add i one;
    jmp .while;
  .endwhile:
    ret xx;
}


@n_root(x:float, n:int):float
{
    one: int = const 1;
    two_f: float = const 2.0;
    xxx: float = fdiv x two_f;
    n_minus_one: int = sub n one;
    i: int = const 0;
    num_iter: int = const 20;
  .while:
    b: bool = lt i num_iter;
    br b .continue .endwhile;
  .continue:
    pow_n_minus_one: float = call @pow xxx n_minus_one;
    pow_n: float = fmul pow_n_minus_one xxx;
    numerator: float = fsub pow_n x;
    denominator: float = fmul x pow_n_minus_one;
    frac: float = fdiv numerator denominator;
    xxx: float = fsub xxx frac;
    i: int = add i one;
    jmp .while;
  .endwhile:
    ret xxx;
}


@main(loop_bound: float) {
  loop_incr: float = const 1;
  loop_counter: float = const 10;
  final_output: float = const 0;
.loop_cond:
  loop_cond: bool = flt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  output: float = call @orig_main loop_counter;
  final_output: float = fadd final_output output;
  loop_counter: float = fadd loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
  print final_output;
}

@orig_main(x: float): float {
    n: int = const 5;
    result: float = call @n_root x n;
    ret result;
}
