# ARGS: 25

@pow(x:float, k:int):float
{
    xx: float = const 1.0;
    one: int = const 1;
    i: int = const 0;
  .while:
    b: bool = lt i k;
    br b .continue .endwhile;
  .continue:
    xx: float = fmul xx x;
    i: int = add i one;
    jmp .while;
  .endwhile:
    ret xx;
}

@n_root(x:float, n:int):float
{
    one: int = const 1;
    two_f: float = const 2.0;
    xxx: float = fdiv x two_f;
    n_minus_one: int = sub n one;
    i: int = const 0;
    num_iter: int = const 20;
  .while:
    b: bool = lt i num_iter;
    br b .continue .endwhile;
  .continue:
    pow_n_minus_one: float = call @pow xxx n_minus_one;
    pow_n: float = fmul pow_n_minus_one xxx;
    numerator: float = fsub pow_n x;
    denominator: float = fmul x pow_n_minus_one;
    frac: float = fdiv numerator denominator;
    xxx: float = fsub xxx frac;
    i: int = add i one;
    jmp .while;
  .endwhile:
    ret xxx;
}

# Modified @pack to handle floats
@pack(size: int, n1: float, n2: float, n3: float, n4: float, n5: float): ptr<float> {
    one: int = const 1;
    i: int = const 0;
    array: ptr<float> = alloc size;
    loc: ptr<float> = ptradd array i;
    store loc n1;
    i: int = add i one;
    loc: ptr<float> = ptradd array i;
    store loc n2;
    i: int = add i one;
    loc: ptr<float> = ptradd array i;
    store loc n3;
    i: int = add i one;
    loc: ptr<float> = ptradd array i;
    store loc n4;
    i: int = add i one;
    loc: ptr<float> = ptradd array i;
    store loc n5;
    ret array;
}

# Borrowed from benchmark suite on GitHub
@print_array(array: ptr<float>, size: int) {
    i: int = const 0;
    one: int = const 1;
  .loop:
    cond: bool = lt i size;
    br cond .body .done;
  .body:
    loc: ptr<float> = ptradd array i;
    val: float = load loc;
    print val;
  .loop_end:
    i: int = add i one;
    jmp .loop;
  .done:
    ret;
}

@euclidean_norm(array: ptr<float>, size: int): float {
    i: int = const 0;
    sum: float = const 0.0;
    one: int = const 1;
  .loop:
    cond: bool = lt i size;
    br cond .body .done;
  .body:
    loc: ptr<float> = ptradd array i;
    val: float = load loc;
    square: float = fmul val val;
    sum: float = fadd sum square;
  .loop_end:
    i: int = add i one;
    jmp .loop;
  .done:
    two: int = const 2;
    norm: float = call @n_root sum two;
    ret norm;
}

@main(loop_bound: float) {
  loop_incr: float = const 1;
  loop_counter: float = const 10;
  final_output: float = const 0;
.loop_cond:
  loop_cond: bool = flt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  loop2_counter: float = const 10;
.loop2_cond:
  loop2_cond: bool = flt loop2_counter loop_bound;
  br loop2_cond .loop2_body .loop2_done;
.loop2_body:
  loop3_counter: float = const 10;
.loop3_cond:
  loop3_cond: bool = flt loop3_counter loop_bound;
  br loop3_cond .loop3_body .loop3_done;
.loop3_body:
  loop4_counter: float = const 11;
.loop4_cond:
  loop4_cond: bool = flt loop4_counter loop_bound;
  br loop4_cond .loop4_body .loop4_done;
.loop4_body:
  loop5_counter: float = const 11;
.loop5_cond:
  loop5_cond: bool = flt loop5_counter loop_bound;
  br loop5_cond .loop5_body .loop5_done;
.loop5_body:
  output: float = call @orig_main loop_counter loop2_counter loop3_counter loop4_counter loop5_counter;
  final_output: float = fadd final_output output;
  loop5_counter: float = fadd loop5_counter loop_incr;
  jmp .loop5_cond;
.loop5_done:  
  loop4_counter: float = fadd loop4_counter loop_incr;
  jmp .loop4_cond;
.loop4_done:  
  loop3_counter: float = fadd loop3_counter loop_incr;
  jmp .loop3_cond;
.loop3_done:  
  loop2_counter: float = fadd loop2_counter loop_incr;
  jmp .loop2_cond;
.loop2_done:
  loop_counter: float = fadd loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
  print final_output;
}

@orig_main(n1: float, n2: float, n3: float, n4: float, n5: float) : float
{
    size: int = const 5;
    array: ptr<float> = call @pack size n1 n2 n3 n4 n5;
    norm: float = call @euclidean_norm array size;
    free array;
    ret norm;
}