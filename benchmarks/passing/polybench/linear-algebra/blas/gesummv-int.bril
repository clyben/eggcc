## gesummv computes some matrix and vector multiplications

@main {
    # constants
    # dimensions correspond to Polybench MEDIUM_DATASET

    N: int = const 250;
    fN: int = const 250;

    one: int = const 1;
    fzero: int = const 0;

    # initialize arrays
    A: ptr<int> = call @matrix_new N N;
    B: ptr<int> = call @matrix_new N N;
    x: ptr<int> = call @vector_new N;
    alpha: int = const 3;
    beta: int = const 2;
    call @init A B x N fN;

    # main computation
    tmp: ptr<int> = call @vector_new N;
    y: ptr<int> = call @vector_new N;

    i: int = const 0;
.main_i:
    cond: bool = lt i N;
    br cond .main_i_body .main_i_done;
.main_i_body:
    call @vector_set tmp i fzero;
    call @vector_set y i fzero;

    j: int = const 0;
.main_j:
    cond: bool = lt j N;
    br cond .main_j_body .main_j_done;
.main_j_body:
    Aij: int = call @matrix_get A i j N;
    xj: int = call @vector_get x j;
    tmpi: int = call @vector_get tmp i;
    val: int = mul Aij xj;
    val: int = add val tmpi;
    call @vector_set tmp i val;

    Bij: int = call @matrix_get B i j N;
    xj: int = call @vector_get x j;
    yi: int = call @vector_get y i;
    val: int = mul Bij xj;
    val: int = add val yi;
    call @vector_set y i val;

    j: int = add j one;
    jmp .main_j;
.main_j_done:
    tmpi: int = call @vector_get tmp i;
    yi: int = call @vector_get y i;
    val1: int = mul alpha tmpi;
    val2: int = mul beta yi;
    new_yi: int = add val1 val2;
    call @vector_set y i new_yi;
    i: int = add i one;
    jmp .main_i;
.main_i_done:

    call @vector_print y N;

    free A;
    free B;
    free tmp;
    free x;
    free y;
}

@init(A: ptr<int>, B: ptr<int>, x: ptr<int>,
      N: int, fN: int) {
    one: int = const 1;
    fone: int = const 1;
    ftwo: int = const 2;

    i: int = const 0;
    fi: int = const 0;
.init_i:
    cond: bool = lt i N;
    br cond .init_i_body .init_i_done;
.init_i_body:
    val: int = call @fmod fi fN;
    val: int = div val fN;
    call @vector_set x i val;

    j: int = const 0;
    fj: int = const 0;
.init_j:
    cond: bool = lt j N;
    br cond .init_j_body .init_j_done;
.init_j_body:
    val: int = mul fi fj;
    val: int = add val fone;
    val: int = call @fmod val fN;
    val: int = div val fN;
    call @matrix_set A i j N val;

    val: int = mul fi fj;
    val: int = add val ftwo;
    val: int = call @fmod val fN;
    val: int = div val fN;
    call @matrix_set B i j N val;

    j: int = add j one;
    fj: int = add fj fone;
    jmp .init_j;
.init_j_done:
    i: int = add i one;
    fi: int = add fi fone;
    jmp .init_i;
.init_i_done:
}

@matrix_new(Nrow: int, Ncol: int): ptr<int> {
    total: int = mul Nrow Ncol;
    ptr: ptr<int> = alloc total;
    ret ptr;
}

@matrix_loc(mtx: ptr<int>, row: int, col: int, Ncol: int): ptr<int> {
    row_offset: int = mul row Ncol;
    offset: int = add row_offset col;
    new_ptr: ptr<int> = ptradd mtx offset;
    ret new_ptr;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_get(mtx: ptr<int>, row: int, col: int, Ncol: int): int {
    ptr: ptr<int> = call @matrix_loc mtx row col Ncol;
    val: int = load ptr;
    ret val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_set(mtx: ptr<int>, row: int, col: int, Ncol: int, val: int) {
    ptr: ptr<int> = call @matrix_loc mtx row col Ncol;
    store ptr val;
}

@vector_new(N: int): ptr<int> {
    ptr: ptr<int> = alloc N;
    ret ptr;
}

@vector_get(vec: ptr<int>, i: int): int {
    ptr: ptr<int> = ptradd vec i;
    val: int = load ptr;
    ret val;
}

@vector_set(vec: ptr<int>, i: int, val: int) {
    ptr: ptr<int> = ptradd vec i;
    store ptr val;
}

# EXPECTS:
#   @vector_get defined
@vector_print(vec: ptr<int>, N: int) {
    i: int = const 0;
    one: int = const 1;
.while:
    cond: bool = lt i N;
    br cond .body .done;
.body:
    val: int = call @vector_get vec i;
    print val;
    i: int = add i one;
    jmp .while;
.done:
}

# Search for n % m where n and m are ints by
# iteratively subtracting the largest m*2^k that
# fits inside n. 
# Takes O((log n/m)^2) time.
# NOTE: In C, this can be done with a built in 
# function, but this is the best we can do.
@fmod(n: int, m: int): int {
    zero: int = const 0;
    two: int = const 2;
    rem: int = id n;
.while:
    cond: bool = ge rem m;
    br cond .body .done;
.body:
    decr: int = id m;
.while_inner:
    diff: int = sub rem decr;
    cond: bool = ge diff zero;
    br cond .body_inner .done_inner;
.body_inner:
    decr: int = mul decr two;
    jmp .while_inner;
.done_inner:
    decr: int = div decr two;
    rem: int = sub rem decr;
    jmp .while;
.done:
    ret rem;
}