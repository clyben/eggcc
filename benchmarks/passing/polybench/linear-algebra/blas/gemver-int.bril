## gemver computes some vector multiplications for
## several procedurally generated vectors.

@main {
    # constants
    # dimensions correspond to Polybench MEDIUM_DATASET

    N: int = const 400;
    fN: int = const 400;

    one: int = const 1;

    # initialize arrays
    A: ptr<int> = call @matrix_new N N;
    u1: ptr<int> = call @vector_new N;
    v1: ptr<int> = call @vector_new N;
    u2: ptr<int> = call @vector_new N;
    v2: ptr<int> = call @vector_new N;
    w: ptr<int> = call @vector_new N;
    x: ptr<int> = call @vector_new N;
    y: ptr<int> = call @vector_new N;
    z: ptr<int> = call @vector_new N;
    alpha: int = const 3;
    beta: int = const 2;
    call @init A u1 v1 u2 v2 w x y z N fN;

    i: int = const 0;
.part1_i:
    cond: bool = lt i N;
    br cond .part1_i_body .part1_i_done;
.part1_i_body:
    j: int = const 0;
.part1_j:
    cond: bool = lt j N;
    br cond .part1_j_body .part1_j_done;
.part1_j_body:
    u1i: int = call @vector_get u1 i;
    v1j: int = call @vector_get v1 j;
    u2i: int = call @vector_get u2 i;
    v2j: int = call @vector_get v2 j;
    Aij: int = call @matrix_get A i j N;
    tmp: int = mul u2i v2j;
    new_Aij: int = mul u1i v1j;
    new_Aij: int = add tmp new_Aij;
    new_Aij: int = add Aij new_Aij;
    call @matrix_set A i j N new_Aij;
    j: int = add j one;
    jmp .part1_j;
.part1_j_done:
    i: int = add i one;
    jmp .part1_i;
.part1_i_done:

    i: int = const 0;
.part2_i:
    cond: bool = lt i N;
    br cond .part2_i_body .part2_i_done;
.part2_i_body:
    j: int = const 0;
.part2_j:
    cond: bool = lt j N;
    br cond .part2_j_body .part2_j_done;
.part2_j_body:
    Aji: int = call @matrix_get A j i N;
    yj: int = call @vector_get y j;
    xi: int = call @vector_get x i;
    new_xi: int = mul Aji yj;
    new_xi: int = mul beta new_xi;
    new_xi: int = add xi new_xi;
    call @vector_set x i new_xi;
    j: int = add j one;
    jmp .part2_j;
.part2_j_done:
    i: int = add i one;
    jmp .part2_i;
.part2_i_done:

    i: int = const 0;
.part3_i:
    cond: bool = lt i N;
    br cond .part3_i_body .part3_i_done;
.part3_i_body:
    xi: int = call @vector_get x i;
    zi: int = call @vector_get z i;
    new_xi: int = add xi zi;
    call @vector_set x i new_xi;
    i: int = add i one;
    jmp .part3_i;
.part3_i_done:

    i: int = const 0;
.part4_i:
    cond: bool = lt i N;
    br cond .part4_i_body .part4_i_done;
.part4_i_body:
    j: int = const 0;
.part4_j:
    cond: bool = lt j N;
    br cond .part4_j_body .part4_j_done;
.part4_j_body:
    Aij: int = call @matrix_get A i j N;
    xj: int = call @vector_get x j;
    wi: int = call @vector_get w i;
    new_wi: int = mul Aij xj;
    new_wi: int = mul alpha new_wi;
    new_wi: int = add wi new_wi;
    call @vector_set w i new_wi;
    j: int = add j one;
    jmp .part4_j;
.part4_j_done:
    i: int = add i one;
    jmp .part4_i;
.part4_i_done:

    call @vector_print w N;

    free A;
    free u1;
    free v1;
    free u2;
    free v2;
    free w;
    free x;
    free y;
    free z;
}


@init(A: ptr<int>, u1: ptr<int>, v1: ptr<int>, u2: ptr<int>, v2: ptr<int>, w: ptr<int>, x: ptr<int>, y: ptr<int>, z: ptr<int>, N: int, fN: int) {
    one: int = const 1;
    fzero: int = const 0;
    fone: int = const 1;
    ftwo: int = const 2;
    ffour: int = const 4;
    fsix: int = const 6;
    feight: int = const 8;
    fnine: int = const 9;
    
    i: int = const 0;
    fi: int = const 0;
.init_i:
    cond: bool = lt i N;
    br cond .init_i_body .init_i_done;
.init_i_body:
    call @vector_set u1 i fi;

    val: int = add fi fone;
    val: int = div val fN;
    val: int = div val ftwo;
    call @vector_set u2 i val;

    val: int = add fi fone;
    val: int = div val fN;
    val: int = div val ffour;
    call @vector_set v1 i val;

    val: int = add fi fone;
    val: int = div val fN;
    val: int = div val fsix;
    call @vector_set v2 i val;

    val: int = add fi fone;
    val: int = div val fN;
    val: int = div val feight;
    call @vector_set y i val;

    val: int = add fi fone;
    val: int = div val fN;
    val: int = div val fnine;
    call @vector_set z i val;

    call @vector_set x i fzero;
    call @vector_set w i fzero;

    j: int = const 0;
    fj: int = const 0;
.init_j:
    cond: bool = lt j N;
    br cond .init_j_body .init_j_done;
.init_j_body:
    val: int = mul fi fj;
    val: int = call @fmod val fN;
    val: int = div val fN;
    call @matrix_set A i j N val;

    j: int = add j one;
    fj: int = add fj fone;
    jmp .init_j;
.init_j_done:
    i: int = add i one;
    fi: int = add fi fone;
    jmp .init_i;
.init_i_done:
}

@matrix_new(Nrow: int, Ncol: int): ptr<int> {
    total: int = mul Nrow Ncol;
    ptr: ptr<int> = alloc total;
    ret ptr;
}

@matrix_loc(mtx: ptr<int>, row: int, col: int, Ncol: int): ptr<int> {
    row_offset: int = mul row Ncol;
    offset: int = add row_offset col;
    new_ptr: ptr<int> = ptradd mtx offset;
    ret new_ptr;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_get(mtx: ptr<int>, row: int, col: int, Ncol: int): int {
    ptr: ptr<int> = call @matrix_loc mtx row col Ncol;
    val: int = load ptr;
    ret val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_set(mtx: ptr<int>, row: int, col: int, Ncol: int, val: int) {
    ptr: ptr<int> = call @matrix_loc mtx row col Ncol;
    store ptr val;
}

@vector_new(N: int): ptr<int> {
    ptr: ptr<int> = alloc N;
    ret ptr;
}

@vector_get(vec: ptr<int>, i: int): int {
    ptr: ptr<int> = ptradd vec i;
    val: int = load ptr;
    ret val;
}

@vector_set(vec: ptr<int>, i: int, val: int) {
    ptr: ptr<int> = ptradd vec i;
    store ptr val;
}

# EXPECTS:
#   @vector_get defined
@vector_print(vec: ptr<int>, N: int) {
    i: int = const 0;
    one: int = const 1;
.while:
    cond: bool = lt i N;
    br cond .body .done;
.body:
    val: int = call @vector_get vec i;
    print val;
    i: int = add i one;
    jmp .while;
.done:
}

# Search for n % m where n and m are ints by
# iteratively subtracting the largest m*2^k that
# fits inside n. 
# Takes O((log n/m)^2) time.
# NOTE: In C, this can be done with a built in 
# function, but this is the best we can do.
@fmod(n: int, m: int): int {
    zero: int = const 0;
    two: int = const 2;
    rem: int = id n;
.while:
    cond: bool = ge rem m;
    br cond .body .done;
.body:
    decr: int = id m;
.while_inner:
    diff: int = sub rem decr;
    cond: bool = ge diff zero;
    br cond .body_inner .done_inner;
.body_inner:
    decr: int = mul decr two;
    jmp .while_inner;
.done_inner:
    decr: int = div decr two;
    rem: int = sub rem decr;
    jmp .while;
.done:
    ret rem;
}

