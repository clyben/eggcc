(ruleset subst)

;; Substitutes all Arg i in all elements of Expr (EVec) with the ith element of Expr (EVec)
(function SubstArgsAll (Expr Expr) Expr :unextractable)

;; Helper to propagate substitution to all elements of the EVec
;;                             vec  args i  vec_out
(relation SubstArgsAll-helper (EVecBase EVecBase i64 EVecBase))
(rule ((SubstArgsAll (EVec vec) (EVec args)))
      ((SubstArgsAll-helper vec args 0 vec)) :ruleset subst)

(rule
    ((SubstArgsAll-helper vec args i vec_out)
      (< i (vec-length vec)))
    ((SubstArgsAll-helper
                vec args (+ i 1) (vec-set vec_out i (SubstArgsAll (vec-get vec_out i) (EVec args)))) )
    :ruleset subst)
(rule
    ((SubstArgsAll-helper vec args i vec_out)
      (= i (vec-length vec))
      (SubstArgsAll (EVec vec) (EVec args)))
    ((union
        (EVec vec_out)
        (SubstArgsAll (EVec vec) (EVec args))))
    :ruleset subst)

;; Propagate substitution down
(rewrite
    (SubstArgsAll (Num id n) args)
    (Num id n)
    :ruleset subst)
(rewrite
    (SubstArgsAll (Bool id b) args)
    (Bool id b)
    :ruleset subst)

(rewrite
    (SubstArgsAll (badd a b) args)
    (badd
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)
(rewrite
    (SubstArgsAll (bsub a b) args)
    (bsub
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)
(rewrite
    (SubstArgsAll (bmul a b) args)
    (bmul
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)

(rewrite
    (SubstArgsAll (blt a b) args)
    (blt
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)
(rewrite
    (SubstArgsAll (band a b) args)
    (band
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)
(rewrite
    (SubstArgsAll (bor a b) args)
    (bor
        (SubstArgsAll a args)
        (SubstArgsAll b args))
  :ruleset subst)

(rewrite
    (SubstArgsAll (Project b i) args)
    (Project (SubstArgsAll b args) i)
    :ruleset subst)

(rewrite
    (SubstArgsAll (PRINT a b) args)
    (PRINT (SubstArgsAll a args) (SubstArgsAll b args))
    :ruleset subst)
(rewrite
    (SubstArgsAll (Call name call-args) args)
    (Call name (SubstArgsAll call-args args))
    :ruleset subst)

(rewrite
    (SubstArgsAll (Loop id pred inputs outputs) args)
    (Loop
        id
        (SubstArgsAll pred args)
        (SubstArgsAll inputs args)
        outputs)
    :ruleset subst)

(rewrite
    (SubstArgsAll (Switch id pred inputs outputs) args)
    (Switch id pred (SubstArgsAll inputs args) outputs)
    :ruleset subst)

;; Base case: union the Arg with the ith element of the arguments vector
(rule ((= f (SubstArgsAll (Arg id i) (EVec args)))
        (< i (vec-length args)))
      ((union f (vec-get args i))) :ruleset subst)
