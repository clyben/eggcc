;; Gives the Id of an expression- which context
;; it is in.
;; Warning! Regions like Loop have the id of their parent region,
;; NOT their own id.
(function Id-Of (Expr) Id)

;; sanity check
(rule ((= (id a) (id b))
    (!= a b))
  ((panic "Id-Of: Ids don't match"))
  :ruleset analyses)

(rule ((Num id n))
  ((union (Id-Of (Num id n)) id))
  :ruleset analyses)
(rule ((Bool id b))
  ((union (Id-Of (Bool id b)) id))
  :ruleset analyses)

(rule ((badd a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (badd a b)) aid))
  :ruleset analyses)
(rule ((bsub a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (bsub a b)) aid))
  :ruleset analyses)
(rule ((bmul a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (bmul a b)) aid))
  :ruleset analyses)
(rule ((blt a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (blt a b)) aid))
  :ruleset analyses)
(rule ((band a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (band a b)) aid))
  :ruleset analyses)
(rule ((bor a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (bor a b)) aid))
  :ruleset analyses)
(rule ((bnot a)
    (= aid (Id-Of a)))
  ((union (Id-Of (bnot a)) aid))
  :ruleset analyses)

(rule ((PRINT a b)
    (= aid (Id-Of a)))
  ((union (Id-Of (PRINT a b)) aid))
  :ruleset analyses)

(rule ((Call name a)
    (= aid (Id-Of a)))
  ((union (Id-Of (Call name a)) aid))
  :ruleset analyses)

(rule ((Loop id a b c)
    (= bid (Id-Of b)))
  ((union (Id-Of (Loop id a b c)) bid))
  :ruleset analyses)
(rule ((Switch id a b c)
    (= aid (Id-Of a)))
  ((union (Id-Of (Switch id a b c)) aid))
  :ruleset analyses)
(rule ((Func id name body))
  ((union (Id-Of (Func id name body)) id))
  :ruleset analyses)

(rule ((Arg id a))
  ((union (Id-Of (Arg id a)) id))
  :ruleset analyses)

(rule
  ((EVec vec)
    (= first (vec-get vec 0))
    (= first-id (Id-Of first)))
  ((union (Id-Of (EVec vec)) first-id))
  :ruleset analyses)
