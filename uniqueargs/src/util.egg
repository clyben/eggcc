;; Creates a vec of Args with some Id
;; (vec-of (Arg id 0) (Arg id 1) ...) with length i
(function PassThroughArgs (Id i64) Expr :unextractable)

;; (how many arguments to generate, vector so far)
(function PassThroughArgsHelper (Id i64 EVecBase) Expr :unextractable)
(rewrite (PassThroughArgs id i) (PassThroughArgsHelper id i (vec-of)))

(rule ((= lhs (PassThroughArgsHelper id i rest))
       (< (vec-length rest) i))
      ((union lhs
        (PassThroughArgsHelper id i
            (vec-push rest (Arg id (vec-length rest)))))))

(rule ((= lhs (PassThroughArgsHelper id i rest))
       (= (vec-length rest) i))
      ((union lhs (EVec rest))))

;; Creates a vec of Projects out of a body
;; (vec-of (Project body 0) (Project body 1) ...) with length i
(function ExprToEVec (i64 Expr) Expr :unextractable)

;; current index, body length, body, and vector so far
(function ExprToEVecHelper (i64 i64 Expr EVecBase) Expr :unextractable)
(rewrite (ExprToEVec body-len body)
         (ExprToEVecHelper 0 body-len body (vec-of)))

(rule
  ((= helper (ExprToEVecHelper index body-len body so-far))
   (< index body-len))
  ((union helper
          (ExprToEVecHelper (+ index 1) body-len body
                                  (vec-push so-far (Project body index))))))

(rewrite (ExprToEVecHelper index-=-len index-=-len body so-far) (EVec so-far))

;; Delayed vec-push utility
(function VecPush (Expr Expr) Expr :unextractable)
(rewrite (VecPush (EVec vec) last) (EVec (vec-push vec last)))
