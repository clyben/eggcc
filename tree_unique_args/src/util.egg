(function ListExpr-length (ListExpr) i64)
(function ListExpr-ith (ListExpr i64) Expr :unextractable)
(function ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(function Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred top)) ((union (ListExpr-suffix top 0) top)) :ruleset always-run)
(rule ((All id order top)) ((union (ListExpr-suffix top 0) top)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
    (Cons a (Append b e))
    :ruleset always-run)
(rewrite (Append (Nil) e)
    (Cons e (Nil))
    :ruleset always-run)

;; get the ith output of a loop

(function get-loop-output (IdSort) Expr :unextractable)
(function get-loop-pred (IdSort) Expr :unextractable)
(rule ((= loop (Loop loop_id inputs pred_outputs))
       (= pred_outputs (All id_1 ord1 pred_out_list))
       (= pred (ListExpr-ith pred_out_list 0))
       (= out (ListExpr-ith pred_out_list 1)))
      ((union (get-loop-output loop_id) out)
       (union (get-loop-pred loop_id) pred)) :ruleset always-run)

;; get the ith output of a loop
(function get-loop-outputs-ith (IdSort i64) Expr :unextractable)
(rule ((= (All id1 ord2 outputs-list) (get-loop-output loop_id))
       (= ith_outputs (ListExpr-ith outputs-list i)))
      ((union (get-loop-outputs-ith loop_id i) ith_outputs)) :ruleset always-run)

(function Expr-size (Expr) i64 :merge (min old new))
(function ListExpr-size (ListExpr) i64 :merge (min old new))

(function TypeList-length (TypeList) i64)
(function TypeList-ith (TypeList i64) Type :unextractable)
(function TypeList-suffix (TypeList i64) TypeList :unextractable)

(rule ((TupleT tylist)) ((union (TypeList-suffix tylist 0) tylist)) :ruleset always-run)

(rule ((= (TypeList-suffix top n) (TCons hd tl)))
    ((union (TypeList-ith top n) hd)
     (union (TypeList-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (TypeList-suffix list n) (TNil)))
    ((set (TypeList-length list) n)) :ruleset always-run)

(function list-of-get-arg-helper (IdSort i64 i64) ListExpr :unextractable)
(rewrite (list-of-get-arg-helper id 0 x) (Nil) :ruleset always-run)
(rule ((list-of-get-arg-helper id a b) (> a 0))
      ((union (list-of-get-arg-helper id a b)
              (Cons (Get (Arg id) b) (list-of-get-arg-helper id (- a 1) (+ b 1))))) :ruleset always-run)
;; creat a new ListExpr like: [(Get (Arg id) 0) ... (Get (Arg id) n)]
(function list-of-get-arg (IdSort i64) ListExpr :unextractable)
(rewrite (list-of-get-arg id n) (list-of-get-arg-helper id n 0) :ruleset always-run)
