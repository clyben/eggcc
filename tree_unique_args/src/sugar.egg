; Functions useful for writing tests and actions, but should not be matched on
(function Pair (Expr Expr) ListExpr)
(rewrite (Pair a b)
         (Cons a (Cons b (Nil)))
         :ruleset always-run)

(function list3 (Expr Expr Expr) ListExpr)
(rewrite (list3 a b c)
         (Cons a (Cons b (Cons c (Nil)))) :ruleset always-run)

(function list4 (Expr Expr Expr Expr) ListExpr)
(rewrite (list4 a b c d)
         (Cons a (Cons b (Cons c (Cons d (Nil))))) :ruleset always-run)

(function list5 (Expr Expr Expr Expr Expr) ListExpr)
(rewrite (list5 a b c d e)
         (Cons a (Cons b (Cons c (Cons d (Cons e (Nil)))))) :ruleset always-run)

(function IgnoreFirst (IdSort Expr Expr) Expr)
(rewrite (IgnoreFirst id a b)
         (Get
             (All id (Sequential) (Cons a (Cons b (Nil))))
             1)
         :ruleset always-run)

(function NewLoop (IdSort Expr Expr) Expr :unextractable)
(rewrite (NewLoop id in out)
         (Loop id in (DeepCopyExpr out id))
         :ruleset always-run)

(function NewLet (IdSort Expr Expr) Expr)
(rewrite (NewLet id in out)
         (Let id in (DeepCopyExpr out id))
         :ruleset always-run)

(function list-of-get-arg-helper (IdSort i64 i64) ListExpr :unextractable)
(rewrite (list-of-get-arg-helper id 0 x) (Nil) :ruleset always-run)
(rule ((list-of-get-arg-helper id a b) (> a 0))
      ((union (list-of-get-arg-helper id a b)
              (Cons (Get (Arg id) b) (list-of-get-arg-helper id (- a 1) (+ b 1))))) :ruleset always-run)
;; creat a new ListExpr like: [(Get (Arg id) 0) ... (Get (Arg id) n)]
(function list-of-get-arg (IdSort i64) ListExpr :unextractable)
(rewrite (list-of-get-arg id n) (list-of-get-arg-helper id n 0) :ruleset always-run)