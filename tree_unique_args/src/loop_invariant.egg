;; Loop Invariant

;; bool: whether the term in the Expr is an invariant.
(function is-inv-Expr (IdSort Expr) bool :unextractable :merge (or old new))
(function is-inv-ListExpr (IdSort ListExpr) bool :unextractable :merge (or old new))

;; in default, when there is a find, set is-inv to false
(rule ((BodyContainsExpr loop_id term) (Loop loop_id in pred_out)) ((set (is-inv-Expr loop_id term) false)) :ruleset always-run)
(rule ((BodyContainsListExpr loop_id term) (Loop loop_id in pred_out)) ((set (is-inv-ListExpr loop_id term) false)) :ruleset always-run)

(relation is-inv-ListExpr-helper (IdSort ListExpr i64))
(rule ((BodyContainsListExpr loop_id list) (Loop loop_id in out)) ((is-inv-ListExpr-helper loop_id list 0)) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop_id list i)
       (= true (is-inv-Expr loop_id expr))
       (= expr (ListExpr-ith list i)))
    ((is-inv-ListExpr-helper loop_id list (+ i 1))) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop_id list i)
       (= i (ListExpr-length list)))
    ((set (is-inv-ListExpr loop_id list) true)) :ruleset always-run)